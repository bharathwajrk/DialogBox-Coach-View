/*
@dojoConfigUpdateStart
if (dojoConfig.isDebug) {
    dojoConfig.packages.push({
        name: 'com.ibm.bpm.dashboards',
                location: com_ibm_bpm_coach.getManagedAssetUrl('dashboards_artifacts_debug.zip', com_ibm_bpm_coach.assetType_WEB, 'SYSD') + "/com/ibm/bpm/dashboards"
        });
} else {
    dojoConfig.packages.push({
        name: 'com.ibm.bpm.dashboards',
                location: com_ibm_bpm_coach.getManagedAssetUrl('dashboards_artifacts.zip', com_ibm_bpm_coach.assetType_WEB, 'SYSD') + "/com/ibm/bpm/dashboards"
        });
    dojoConfig.packages.push({
        name: 'com_ibm_bpm_dashboards',
        location: com_ibm_bpm_coach.getManagedAssetUrl('dashboards_artifacts.zip', com_ibm_bpm_coach.assetType_WEB, 'SYSD') + "/com_ibm_bpm_dashboards"
    });
}
@dojoConfigUpdateEnd
@layerRequiredStart
{
  "nonDebug":["com_ibm_bpm_dashboards/dashboards"]
}
@layerRequiredEnd
*/
this.NO_TITLE = 0;
this.TITLE_AND_SUBTITLE = 1;
this.TITLE_ONLY = 2;
this.SUBTITLE_ONLY = 3;
this.titleState = this.NO_TITLE;
this.titleStateChange = false;

this.stripTags = function(string){
    var result = string;
    var temp = document.createElement("div");
    temp.innerHTML = string;
    return temp.textContent || temp.innerText;
};

this.evalTitleState = function(){
    var title = subtitle = "";
    if( this.context.options && this.context.options.title){
        title = this.context.options.title.get("value");
    }  
    if( this.context.options && this.context.options.subtitle){
        subtitle = this.context.options.subtitle.get("value");
    }
    
    //dijitDialog = this.context.element.parentElement.parentElement;
    
    if(typeof(title)!="undefined" && title!="" && typeof(subtitle)!="undefined" && subtitle!=""){
        this.titleState = this.TITLE_AND_SUBTITLE;
        if(this.dialog!=null){
            domClass.remove(this.context.element.parentElement.parentElement, "noTitle");
        }
    } else if(typeof(title)!="undefined" && title!=""){
        this.titleState = this.TITLE_ONLY;
        if(this.dialog!=null){
            domClass.remove(this.context.element.parentElement.parentElement, "noTitle");
        }
    } else if(typeof(subtitle)!="undefined" && subtitle!=""){
        this.titleState = this.SUBTITLE_ONLY;
        if(this.dialog!=null){
            domClass.remove(this.context.element.parentElement.parentElement, "noTitle");
        }
    } else {
        this.titleState = this.NO_TITLE;
        if(this.dialog!=null){
            domClass.add(this.context.element.parentElement.parentElement, "noTitle");
        }
    }
};

this.evalTitleHeight = function(/*boolean*/ ignoreCurrentTitleHeight){
    if(this.dialog==null){
        return;
    }

    var dijitDialogTitleBar = this.context.element.parentElement.previousElementSibling;
    var dijitDialog = this.context.element.parentElement.parentElement;
                 
    var minh = 0;
    if(this.titleState == this.NO_TITLE){
        domStyle.set(dijitDialogTitleBar, "height", minh+"px");
        return;
    }
    
    if(typeof(ignoreCurrentTitleHeight)=="undefined"){
        ignoreCurrentTitleHeight = false;
    }
    
    var titleClientHeight = ( ignoreCurrentTitleHeight ? 0 : dijitDialogTitleBar.clientHeight);
    if(this.titleState == this.TITLE_ONLY || this.titleState == this.TITLE_AND_SUBTITLE){
        var title = query(".dialogTitle", dijitDialogTitleBar)[0];
        minh += title.clientHeight;
    } 
    if(this.titleState == this.SUBTITLE_ONLY || this.titleState == this.TITLE_AND_SUBTITLE){
        var subtitle = query(".dialogSubtitle", dijitDialogTitleBar)[0];
        minh += subtitle.clientHeight;
    }
    if(minh > titleClientHeight){
        domStyle.set(dijitDialogTitleBar, "height", minh+"px");
        if(has("chrome") || has("safari")){
            domStyle.set(dijitDialog, "width", dijitDialogTitleBar.clientWidth+"px");
        } else if(has("ie")){
            domClass.add(dijitDialogTitleBar.firstElementChild,"wrappedTitle");
        }
    }
};

this.updateTitleAttribute = function(){

    if(this.dialog==null){
        return;
    }

    var dijitDialogTitleBar = this.context.element.parentElement.previousElementSibling;
    var title = "";

    var bits = query(".dialogTitle", dijitDialogTitleBar);
    if(bits.length==1){
        title += bits[0].innerHTML;
    }
    bits = query(".dialogSubtitle", dijitDialogTitleBar);
    if(bits.length==1){
        if(title!=""){
            title += " ";
        }
        title += bits[0].innerHTML;
    }
    dijitDialogTitleBar.title = this.stripTags(title);
};
